#!/bin/bash

HEARTBEAT_FILE="/tmp/ablox_heartbeat"
PID_FILE="/tmp/ablox_watchdog.pid"
LOG_FILE="/tmp/ablox_watchdog.log"

# Check if the script is already running
if [ -f "$PID_FILE" ]; then
    EXISTING_PID=$(cat "$PID_FILE")
    if ps -p $EXISTING_PID > /dev/null 2>&1; then
        echo "Watchdog is already running with PID $EXISTING_PID. Exiting."
        exit 0
    else
        echo "Stale PID file found. Removing it."
        rm "$PID_FILE"
    fi
fi

# Write our PID to the PID file
echo $$ > "$PID_FILE"

# Function to kill _ablox processes
kill_ablox_processes() {
    pkill -f "_ablox"
    echo "$(date): Killed all processes with _ablox in their name" >> "$LOG_FILE"
}

# Function to clean up before exiting
cleanup() {
    rm -f "$PID_FILE"
    echo "$(date): Watchdog exiting." >> "$LOG_FILE"
}

# Set up trap to ensure cleanup on exit
trap cleanup EXIT

# Initialize the heartbeat file if it doesn't exist
touch "$HEARTBEAT_FILE"

last_heartbeat=$(stat -f %m "$HEARTBEAT_FILE")

while true; do
    sleep 1  # Check every 5 seconds

    current_time=$(date +%s)
    new_heartbeat=$(stat -f %m "$HEARTBEAT_FILE")

    if [ "$new_heartbeat" = "$last_heartbeat" ]; then
        # No new heartbeat received
        time_diff=$((current_time - last_heartbeat))
        if [ $time_diff -gt 3 ]; then
            echo "$(date): No heartbeat received for more than 3 seconds. Killing processes and exiting." >> "$LOG_FILE"
            kill_ablox_processes
            exit 0
        fi
    else
        last_heartbeat=$new_heartbeat
    fi
done